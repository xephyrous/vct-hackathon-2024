import { awsExpectUnion as __expectUnion, loadRestJsonErrorCode, parseJsonBody as parseBody, parseJsonErrorBody as parseErrorBody, } from "@aws-sdk/core";
import { requestBuilder as rb } from "@smithy/core";
import { _json, collectBody, decorateServiceException as __decorateServiceException, expectInt32 as __expectInt32, expectNonNull as __expectNonNull, expectObject as __expectObject, expectString as __expectString, limitedParseDouble as __limitedParseDouble, limitedParseFloat32 as __limitedParseFloat32, map, parseRfc3339DateTimeWithOffset as __parseRfc3339DateTimeWithOffset, serializeDateTime as __serializeDateTime, serializeFloat as __serializeFloat, take, withBaseException, } from "@smithy/smithy-client";
import { v4 as generateIdempotencyToken } from "uuid";
import { BedrockServiceException as __BaseException } from "../models/BedrockServiceException";
import { AccessDeniedException, ConflictException, InternalServerException, ResourceNotFoundException, ServiceQuotaExceededException, ThrottlingException, TooManyTagsException, ValidationException, } from "../models/models_0";
export const se_BatchDeleteEvaluationJobCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/evaluation-jobs/batch-delete");
    let body;
    body = JSON.stringify(take(input, {
        jobIdentifiers: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateEvaluationJobCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/evaluation-jobs");
    let body;
    body = JSON.stringify(take(input, {
        clientRequestToken: [true, (_) => _ ?? generateIdempotencyToken()],
        customerEncryptionKeyId: [],
        evaluationConfig: (_) => _json(_),
        inferenceConfig: (_) => _json(_),
        jobDescription: [],
        jobName: [],
        jobTags: (_) => _json(_),
        outputDataConfig: (_) => _json(_),
        roleArn: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateGuardrailCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/guardrails");
    let body;
    body = JSON.stringify(take(input, {
        blockedInputMessaging: [],
        blockedOutputsMessaging: [],
        clientRequestToken: [true, (_) => _ ?? generateIdempotencyToken()],
        contentPolicyConfig: (_) => _json(_),
        contextualGroundingPolicyConfig: (_) => se_GuardrailContextualGroundingPolicyConfig(_, context),
        description: [],
        kmsKeyId: [],
        name: [],
        sensitiveInformationPolicyConfig: (_) => _json(_),
        tags: (_) => _json(_),
        topicPolicyConfig: (_) => _json(_),
        wordPolicyConfig: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateGuardrailVersionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/guardrails/{guardrailIdentifier}");
    b.p("guardrailIdentifier", () => input.guardrailIdentifier, "{guardrailIdentifier}", false);
    let body;
    body = JSON.stringify(take(input, {
        clientRequestToken: [true, (_) => _ ?? generateIdempotencyToken()],
        description: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateModelCopyJobCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/model-copy-jobs");
    let body;
    body = JSON.stringify(take(input, {
        clientRequestToken: [true, (_) => _ ?? generateIdempotencyToken()],
        modelKmsKeyId: [],
        sourceModelArn: [],
        targetModelName: [],
        targetModelTags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateModelCustomizationJobCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/model-customization-jobs");
    let body;
    body = JSON.stringify(take(input, {
        baseModelIdentifier: [],
        clientRequestToken: [true, (_) => _ ?? generateIdempotencyToken()],
        customModelKmsKeyId: [],
        customModelName: [],
        customModelTags: (_) => _json(_),
        customizationType: [],
        hyperParameters: (_) => _json(_),
        jobName: [],
        jobTags: (_) => _json(_),
        outputDataConfig: (_) => _json(_),
        roleArn: [],
        trainingDataConfig: (_) => _json(_),
        validationDataConfig: (_) => _json(_),
        vpcConfig: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateModelImportJobCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/model-import-jobs");
    let body;
    body = JSON.stringify(take(input, {
        clientRequestToken: [],
        importedModelKmsKeyId: [],
        importedModelName: [],
        importedModelTags: (_) => _json(_),
        jobName: [],
        jobTags: (_) => _json(_),
        modelDataSource: (_) => _json(_),
        roleArn: [],
        vpcConfig: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateModelInvocationJobCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/model-invocation-job");
    let body;
    body = JSON.stringify(take(input, {
        clientRequestToken: [true, (_) => _ ?? generateIdempotencyToken()],
        inputDataConfig: (_) => _json(_),
        jobName: [],
        modelId: [],
        outputDataConfig: (_) => _json(_),
        roleArn: [],
        tags: (_) => _json(_),
        timeoutDurationInHours: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateProvisionedModelThroughputCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/provisioned-model-throughput");
    let body;
    body = JSON.stringify(take(input, {
        clientRequestToken: [true, (_) => _ ?? generateIdempotencyToken()],
        commitmentDuration: [],
        modelId: [],
        modelUnits: [],
        provisionedModelName: [],
        tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DeleteCustomModelCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/custom-models/{modelIdentifier}");
    b.p("modelIdentifier", () => input.modelIdentifier, "{modelIdentifier}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteGuardrailCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/guardrails/{guardrailIdentifier}");
    b.p("guardrailIdentifier", () => input.guardrailIdentifier, "{guardrailIdentifier}", false);
    const query = map({
        [_gV]: [, input[_gV]],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_DeleteImportedModelCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/imported-models/{modelIdentifier}");
    b.p("modelIdentifier", () => input.modelIdentifier, "{modelIdentifier}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteModelInvocationLoggingConfigurationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/logging/modelinvocations");
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteProvisionedModelThroughputCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/provisioned-model-throughput/{provisionedModelId}");
    b.p("provisionedModelId", () => input.provisionedModelId, "{provisionedModelId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_GetCustomModelCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/custom-models/{modelIdentifier}");
    b.p("modelIdentifier", () => input.modelIdentifier, "{modelIdentifier}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetEvaluationJobCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/evaluation-jobs/{jobIdentifier}");
    b.p("jobIdentifier", () => input.jobIdentifier, "{jobIdentifier}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetFoundationModelCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/foundation-models/{modelIdentifier}");
    b.p("modelIdentifier", () => input.modelIdentifier, "{modelIdentifier}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetGuardrailCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/guardrails/{guardrailIdentifier}");
    b.p("guardrailIdentifier", () => input.guardrailIdentifier, "{guardrailIdentifier}", false);
    const query = map({
        [_gV]: [, input[_gV]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_GetImportedModelCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/imported-models/{modelIdentifier}");
    b.p("modelIdentifier", () => input.modelIdentifier, "{modelIdentifier}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetInferenceProfileCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/inference-profiles/{inferenceProfileIdentifier}");
    b.p("inferenceProfileIdentifier", () => input.inferenceProfileIdentifier, "{inferenceProfileIdentifier}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetModelCopyJobCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/model-copy-jobs/{jobArn}");
    b.p("jobArn", () => input.jobArn, "{jobArn}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetModelCustomizationJobCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/model-customization-jobs/{jobIdentifier}");
    b.p("jobIdentifier", () => input.jobIdentifier, "{jobIdentifier}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetModelImportJobCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/model-import-jobs/{jobIdentifier}");
    b.p("jobIdentifier", () => input.jobIdentifier, "{jobIdentifier}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetModelInvocationJobCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/model-invocation-job/{jobIdentifier}");
    b.p("jobIdentifier", () => input.jobIdentifier, "{jobIdentifier}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetModelInvocationLoggingConfigurationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/logging/modelinvocations");
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetProvisionedModelThroughputCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/provisioned-model-throughput/{provisionedModelId}");
    b.p("provisionedModelId", () => input.provisionedModelId, "{provisionedModelId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_ListCustomModelsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/custom-models");
    const query = map({
        [_cTB]: [() => input.creationTimeBefore !== void 0, () => __serializeDateTime(input[_cTB]).toString()],
        [_cTA]: [() => input.creationTimeAfter !== void 0, () => __serializeDateTime(input[_cTA]).toString()],
        [_nC]: [, input[_nC]],
        [_bMAE]: [, input[_bMAE]],
        [_fMAE]: [, input[_fMAE]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
        [_nT]: [, input[_nT]],
        [_sB]: [, input[_sB]],
        [_sO]: [, input[_sO]],
        [_iO]: [() => input.isOwned !== void 0, () => input[_iO].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListEvaluationJobsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/evaluation-jobs");
    const query = map({
        [_cTA]: [() => input.creationTimeAfter !== void 0, () => __serializeDateTime(input[_cTA]).toString()],
        [_cTB]: [() => input.creationTimeBefore !== void 0, () => __serializeDateTime(input[_cTB]).toString()],
        [_sE]: [, input[_sE]],
        [_nC]: [, input[_nC]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
        [_nT]: [, input[_nT]],
        [_sB]: [, input[_sB]],
        [_sO]: [, input[_sO]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListFoundationModelsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/foundation-models");
    const query = map({
        [_bP]: [, input[_bP]],
        [_bCT]: [, input[_bCT]],
        [_bOM]: [, input[_bOM]],
        [_bIT]: [, input[_bIT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListGuardrailsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/guardrails");
    const query = map({
        [_gI]: [, input[_gI]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
        [_nT]: [, input[_nT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListImportedModelsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/imported-models");
    const query = map({
        [_cTB]: [() => input.creationTimeBefore !== void 0, () => __serializeDateTime(input[_cTB]).toString()],
        [_cTA]: [() => input.creationTimeAfter !== void 0, () => __serializeDateTime(input[_cTA]).toString()],
        [_nC]: [, input[_nC]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
        [_nT]: [, input[_nT]],
        [_sB]: [, input[_sB]],
        [_sO]: [, input[_sO]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListInferenceProfilesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/inference-profiles");
    const query = map({
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
        [_nT]: [, input[_nT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListModelCopyJobsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/model-copy-jobs");
    const query = map({
        [_cTA]: [() => input.creationTimeAfter !== void 0, () => __serializeDateTime(input[_cTA]).toString()],
        [_cTB]: [() => input.creationTimeBefore !== void 0, () => __serializeDateTime(input[_cTB]).toString()],
        [_sE]: [, input[_sE]],
        [_sAE]: [, input[_sAE]],
        [_sMAE]: [, input[_sMAE]],
        [_oMNC]: [, input[_tMNC]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
        [_nT]: [, input[_nT]],
        [_sB]: [, input[_sB]],
        [_sO]: [, input[_sO]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListModelCustomizationJobsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/model-customization-jobs");
    const query = map({
        [_cTA]: [() => input.creationTimeAfter !== void 0, () => __serializeDateTime(input[_cTA]).toString()],
        [_cTB]: [() => input.creationTimeBefore !== void 0, () => __serializeDateTime(input[_cTB]).toString()],
        [_sE]: [, input[_sE]],
        [_nC]: [, input[_nC]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
        [_nT]: [, input[_nT]],
        [_sB]: [, input[_sB]],
        [_sO]: [, input[_sO]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListModelImportJobsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/model-import-jobs");
    const query = map({
        [_cTA]: [() => input.creationTimeAfter !== void 0, () => __serializeDateTime(input[_cTA]).toString()],
        [_cTB]: [() => input.creationTimeBefore !== void 0, () => __serializeDateTime(input[_cTB]).toString()],
        [_sE]: [, input[_sE]],
        [_nC]: [, input[_nC]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
        [_nT]: [, input[_nT]],
        [_sB]: [, input[_sB]],
        [_sO]: [, input[_sO]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListModelInvocationJobsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/model-invocation-jobs");
    const query = map({
        [_sTA]: [() => input.submitTimeAfter !== void 0, () => __serializeDateTime(input[_sTA]).toString()],
        [_sTB]: [() => input.submitTimeBefore !== void 0, () => __serializeDateTime(input[_sTB]).toString()],
        [_sE]: [, input[_sE]],
        [_nC]: [, input[_nC]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
        [_nT]: [, input[_nT]],
        [_sB]: [, input[_sB]],
        [_sO]: [, input[_sO]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListProvisionedModelThroughputsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/provisioned-model-throughputs");
    const query = map({
        [_cTA]: [() => input.creationTimeAfter !== void 0, () => __serializeDateTime(input[_cTA]).toString()],
        [_cTB]: [() => input.creationTimeBefore !== void 0, () => __serializeDateTime(input[_cTB]).toString()],
        [_sE]: [, input[_sE]],
        [_mAE]: [, input[_mAE]],
        [_nC]: [, input[_nC]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
        [_nT]: [, input[_nT]],
        [_sB]: [, input[_sB]],
        [_sO]: [, input[_sO]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListTagsForResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/listTagsForResource");
    let body;
    body = JSON.stringify(take(input, {
        resourceARN: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_PutModelInvocationLoggingConfigurationCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/logging/modelinvocations");
    let body;
    body = JSON.stringify(take(input, {
        loggingConfig: (_) => _json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_StopEvaluationJobCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/evaluation-job/{jobIdentifier}/stop");
    b.p("jobIdentifier", () => input.jobIdentifier, "{jobIdentifier}", false);
    let body;
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_StopModelCustomizationJobCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/model-customization-jobs/{jobIdentifier}/stop");
    b.p("jobIdentifier", () => input.jobIdentifier, "{jobIdentifier}", false);
    let body;
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_StopModelInvocationJobCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/model-invocation-job/{jobIdentifier}/stop");
    b.p("jobIdentifier", () => input.jobIdentifier, "{jobIdentifier}", false);
    let body;
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_TagResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/tagResource");
    let body;
    body = JSON.stringify(take(input, {
        resourceARN: [],
        tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UntagResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/untagResource");
    let body;
    body = JSON.stringify(take(input, {
        resourceARN: [],
        tagKeys: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UpdateGuardrailCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/guardrails/{guardrailIdentifier}");
    b.p("guardrailIdentifier", () => input.guardrailIdentifier, "{guardrailIdentifier}", false);
    let body;
    body = JSON.stringify(take(input, {
        blockedInputMessaging: [],
        blockedOutputsMessaging: [],
        contentPolicyConfig: (_) => _json(_),
        contextualGroundingPolicyConfig: (_) => se_GuardrailContextualGroundingPolicyConfig(_, context),
        description: [],
        kmsKeyId: [],
        name: [],
        sensitiveInformationPolicyConfig: (_) => _json(_),
        topicPolicyConfig: (_) => _json(_),
        wordPolicyConfig: (_) => _json(_),
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateProvisionedModelThroughputCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/provisioned-model-throughput/{provisionedModelId}");
    b.p("provisionedModelId", () => input.provisionedModelId, "{provisionedModelId}", false);
    let body;
    body = JSON.stringify(take(input, {
        desiredModelId: [],
        desiredProvisionedModelName: [],
    }));
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
export const de_BatchDeleteEvaluationJobCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        errors: _json,
        evaluationJobs: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateEvaluationJobCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        jobArn: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateGuardrailCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        createdAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        guardrailArn: __expectString,
        guardrailId: __expectString,
        version: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateGuardrailVersionCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        guardrailId: __expectString,
        version: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateModelCopyJobCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        jobArn: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateModelCustomizationJobCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        jobArn: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateModelImportJobCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        jobArn: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateModelInvocationJobCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        jobArn: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateProvisionedModelThroughputCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        provisionedModelArn: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteCustomModelCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteGuardrailCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteImportedModelCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteModelInvocationLoggingConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteProvisionedModelThroughputCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_GetCustomModelCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        baseModelArn: __expectString,
        creationTime: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        customizationType: __expectString,
        hyperParameters: _json,
        jobArn: __expectString,
        jobName: __expectString,
        modelArn: __expectString,
        modelKmsKeyArn: __expectString,
        modelName: __expectString,
        outputDataConfig: _json,
        trainingDataConfig: _json,
        trainingMetrics: (_) => de_TrainingMetrics(_, context),
        validationDataConfig: _json,
        validationMetrics: (_) => de_ValidationMetrics(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetEvaluationJobCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        creationTime: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        customerEncryptionKeyId: __expectString,
        evaluationConfig: (_) => _json(__expectUnion(_)),
        failureMessages: _json,
        inferenceConfig: (_) => _json(__expectUnion(_)),
        jobArn: __expectString,
        jobDescription: __expectString,
        jobName: __expectString,
        jobType: __expectString,
        lastModifiedTime: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        outputDataConfig: _json,
        roleArn: __expectString,
        status: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetFoundationModelCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        modelDetails: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetGuardrailCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        blockedInputMessaging: __expectString,
        blockedOutputsMessaging: __expectString,
        contentPolicy: _json,
        contextualGroundingPolicy: (_) => de_GuardrailContextualGroundingPolicy(_, context),
        createdAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        description: __expectString,
        failureRecommendations: _json,
        guardrailArn: __expectString,
        guardrailId: __expectString,
        kmsKeyArn: __expectString,
        name: __expectString,
        sensitiveInformationPolicy: _json,
        status: __expectString,
        statusReasons: _json,
        topicPolicy: _json,
        updatedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        version: __expectString,
        wordPolicy: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetImportedModelCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        creationTime: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        jobArn: __expectString,
        jobName: __expectString,
        modelArchitecture: __expectString,
        modelArn: __expectString,
        modelDataSource: (_) => _json(__expectUnion(_)),
        modelKmsKeyArn: __expectString,
        modelName: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetInferenceProfileCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        createdAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        description: __expectString,
        inferenceProfileArn: __expectString,
        inferenceProfileId: __expectString,
        inferenceProfileName: __expectString,
        models: _json,
        status: __expectString,
        type: __expectString,
        updatedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetModelCopyJobCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        creationTime: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        failureMessage: __expectString,
        jobArn: __expectString,
        sourceAccountId: __expectString,
        sourceModelArn: __expectString,
        sourceModelName: __expectString,
        status: __expectString,
        targetModelArn: __expectString,
        targetModelKmsKeyArn: __expectString,
        targetModelName: __expectString,
        targetModelTags: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetModelCustomizationJobCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        baseModelArn: __expectString,
        clientRequestToken: __expectString,
        creationTime: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        customizationType: __expectString,
        endTime: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        failureMessage: __expectString,
        hyperParameters: _json,
        jobArn: __expectString,
        jobName: __expectString,
        lastModifiedTime: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        outputDataConfig: _json,
        outputModelArn: __expectString,
        outputModelKmsKeyArn: __expectString,
        outputModelName: __expectString,
        roleArn: __expectString,
        status: __expectString,
        trainingDataConfig: _json,
        trainingMetrics: (_) => de_TrainingMetrics(_, context),
        validationDataConfig: _json,
        validationMetrics: (_) => de_ValidationMetrics(_, context),
        vpcConfig: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetModelImportJobCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        creationTime: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        endTime: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        failureMessage: __expectString,
        importedModelArn: __expectString,
        importedModelKmsKeyArn: __expectString,
        importedModelName: __expectString,
        jobArn: __expectString,
        jobName: __expectString,
        lastModifiedTime: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        modelDataSource: (_) => _json(__expectUnion(_)),
        roleArn: __expectString,
        status: __expectString,
        vpcConfig: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetModelInvocationJobCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        clientRequestToken: __expectString,
        endTime: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        inputDataConfig: (_) => _json(__expectUnion(_)),
        jobArn: __expectString,
        jobExpirationTime: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        jobName: __expectString,
        lastModifiedTime: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        message: __expectString,
        modelId: __expectString,
        outputDataConfig: (_) => _json(__expectUnion(_)),
        roleArn: __expectString,
        status: __expectString,
        submitTime: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        timeoutDurationInHours: __expectInt32,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetModelInvocationLoggingConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        loggingConfig: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetProvisionedModelThroughputCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        commitmentDuration: __expectString,
        commitmentExpirationTime: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        creationTime: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        desiredModelArn: __expectString,
        desiredModelUnits: __expectInt32,
        failureMessage: __expectString,
        foundationModelArn: __expectString,
        lastModifiedTime: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        modelArn: __expectString,
        modelUnits: __expectInt32,
        provisionedModelArn: __expectString,
        provisionedModelName: __expectString,
        status: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListCustomModelsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        modelSummaries: (_) => de_CustomModelSummaryList(_, context),
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListEvaluationJobsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        jobSummaries: (_) => de_EvaluationSummaries(_, context),
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListFoundationModelsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        modelSummaries: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListGuardrailsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        guardrails: (_) => de_GuardrailSummaries(_, context),
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListImportedModelsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        modelSummaries: (_) => de_ImportedModelSummaryList(_, context),
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListInferenceProfilesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        inferenceProfileSummaries: (_) => de_InferenceProfileSummaries(_, context),
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListModelCopyJobsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        modelCopyJobSummaries: (_) => de_ModelCopyJobSummaries(_, context),
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListModelCustomizationJobsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        modelCustomizationJobSummaries: (_) => de_ModelCustomizationJobSummaries(_, context),
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListModelImportJobsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        modelImportJobSummaries: (_) => de_ModelImportJobSummaries(_, context),
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListModelInvocationJobsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        invocationJobSummaries: (_) => de_ModelInvocationJobSummaries(_, context),
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListProvisionedModelThroughputsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        nextToken: __expectString,
        provisionedModelSummaries: (_) => de_ProvisionedModelSummaries(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        tags: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_PutModelInvocationLoggingConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_StopEvaluationJobCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_StopModelCustomizationJobCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_StopModelInvocationJobCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateGuardrailCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        guardrailArn: __expectString,
        guardrailId: __expectString,
        updatedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        version: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateProvisionedModelThroughputCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.bedrock#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.bedrock#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.bedrock#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.bedrock#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.bedrock#ThrottlingException":
            throw await de_ThrottlingExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.bedrock#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        case "ServiceQuotaExceededException":
        case "com.amazonaws.bedrock#ServiceQuotaExceededException":
            throw await de_ServiceQuotaExceededExceptionRes(parsedOutput, context);
        case "TooManyTagsException":
        case "com.amazonaws.bedrock#TooManyTagsException":
            throw await de_TooManyTagsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const throwDefaultError = withBaseException(__BaseException);
const de_AccessDeniedExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new AccessDeniedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ConflictExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_InternalServerExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new InternalServerException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ServiceQuotaExceededExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ServiceQuotaExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ThrottlingExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ThrottlingException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_TooManyTagsExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
        resourceName: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new TooManyTagsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ValidationExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ValidationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const se_GuardrailContextualGroundingFilterConfig = (input, context) => {
    return take(input, {
        threshold: __serializeFloat,
        type: [],
    });
};
const se_GuardrailContextualGroundingFiltersConfig = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_GuardrailContextualGroundingFilterConfig(entry, context);
    });
};
const se_GuardrailContextualGroundingPolicyConfig = (input, context) => {
    return take(input, {
        filtersConfig: (_) => se_GuardrailContextualGroundingFiltersConfig(_, context),
    });
};
const de_CustomModelSummary = (output, context) => {
    return take(output, {
        baseModelArn: __expectString,
        baseModelName: __expectString,
        creationTime: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        customizationType: __expectString,
        modelArn: __expectString,
        modelName: __expectString,
        ownerAccountId: __expectString,
    });
};
const de_CustomModelSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CustomModelSummary(entry, context);
    });
    return retVal;
};
const de_EvaluationSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_EvaluationSummary(entry, context);
    });
    return retVal;
};
const de_EvaluationSummary = (output, context) => {
    return take(output, {
        creationTime: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        evaluationTaskTypes: _json,
        jobArn: __expectString,
        jobName: __expectString,
        jobType: __expectString,
        modelIdentifiers: _json,
        status: __expectString,
    });
};
const de_GuardrailContextualGroundingFilter = (output, context) => {
    return take(output, {
        threshold: __limitedParseDouble,
        type: __expectString,
    });
};
const de_GuardrailContextualGroundingFilters = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_GuardrailContextualGroundingFilter(entry, context);
    });
    return retVal;
};
const de_GuardrailContextualGroundingPolicy = (output, context) => {
    return take(output, {
        filters: (_) => de_GuardrailContextualGroundingFilters(_, context),
    });
};
const de_GuardrailSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_GuardrailSummary(entry, context);
    });
    return retVal;
};
const de_GuardrailSummary = (output, context) => {
    return take(output, {
        arn: __expectString,
        createdAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        description: __expectString,
        id: __expectString,
        name: __expectString,
        status: __expectString,
        updatedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        version: __expectString,
    });
};
const de_ImportedModelSummary = (output, context) => {
    return take(output, {
        creationTime: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        modelArn: __expectString,
        modelName: __expectString,
    });
};
const de_ImportedModelSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ImportedModelSummary(entry, context);
    });
    return retVal;
};
const de_InferenceProfileSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_InferenceProfileSummary(entry, context);
    });
    return retVal;
};
const de_InferenceProfileSummary = (output, context) => {
    return take(output, {
        createdAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        description: __expectString,
        inferenceProfileArn: __expectString,
        inferenceProfileId: __expectString,
        inferenceProfileName: __expectString,
        models: _json,
        status: __expectString,
        type: __expectString,
        updatedAt: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
    });
};
const de_ModelCopyJobSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ModelCopyJobSummary(entry, context);
    });
    return retVal;
};
const de_ModelCopyJobSummary = (output, context) => {
    return take(output, {
        creationTime: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        failureMessage: __expectString,
        jobArn: __expectString,
        sourceAccountId: __expectString,
        sourceModelArn: __expectString,
        sourceModelName: __expectString,
        status: __expectString,
        targetModelArn: __expectString,
        targetModelKmsKeyArn: __expectString,
        targetModelName: __expectString,
        targetModelTags: _json,
    });
};
const de_ModelCustomizationJobSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ModelCustomizationJobSummary(entry, context);
    });
    return retVal;
};
const de_ModelCustomizationJobSummary = (output, context) => {
    return take(output, {
        baseModelArn: __expectString,
        creationTime: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        customModelArn: __expectString,
        customModelName: __expectString,
        customizationType: __expectString,
        endTime: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        jobArn: __expectString,
        jobName: __expectString,
        lastModifiedTime: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        status: __expectString,
    });
};
const de_ModelImportJobSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ModelImportJobSummary(entry, context);
    });
    return retVal;
};
const de_ModelImportJobSummary = (output, context) => {
    return take(output, {
        creationTime: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        endTime: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        importedModelArn: __expectString,
        importedModelName: __expectString,
        jobArn: __expectString,
        jobName: __expectString,
        lastModifiedTime: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        status: __expectString,
    });
};
const de_ModelInvocationJobSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ModelInvocationJobSummary(entry, context);
    });
    return retVal;
};
const de_ModelInvocationJobSummary = (output, context) => {
    return take(output, {
        clientRequestToken: __expectString,
        endTime: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        inputDataConfig: (_) => _json(__expectUnion(_)),
        jobArn: __expectString,
        jobExpirationTime: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        jobName: __expectString,
        lastModifiedTime: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        message: __expectString,
        modelId: __expectString,
        outputDataConfig: (_) => _json(__expectUnion(_)),
        roleArn: __expectString,
        status: __expectString,
        submitTime: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        timeoutDurationInHours: __expectInt32,
    });
};
const de_ProvisionedModelSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ProvisionedModelSummary(entry, context);
    });
    return retVal;
};
const de_ProvisionedModelSummary = (output, context) => {
    return take(output, {
        commitmentDuration: __expectString,
        commitmentExpirationTime: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        creationTime: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        desiredModelArn: __expectString,
        desiredModelUnits: __expectInt32,
        foundationModelArn: __expectString,
        lastModifiedTime: (_) => __expectNonNull(__parseRfc3339DateTimeWithOffset(_)),
        modelArn: __expectString,
        modelUnits: __expectInt32,
        provisionedModelArn: __expectString,
        provisionedModelName: __expectString,
        status: __expectString,
    });
};
const de_TrainingMetrics = (output, context) => {
    return take(output, {
        trainingLoss: __limitedParseFloat32,
    });
};
const de_ValidationMetrics = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ValidatorMetric(entry, context);
    });
    return retVal;
};
const de_ValidatorMetric = (output, context) => {
    return take(output, {
        validationLoss: __limitedParseFloat32,
    });
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const isSerializableHeaderValue = (value) => value !== undefined &&
    value !== null &&
    value !== "" &&
    (!Object.getOwnPropertyNames(value).includes("length") || value.length != 0) &&
    (!Object.getOwnPropertyNames(value).includes("size") || value.size != 0);
const _bCT = "byCustomizationType";
const _bIT = "byInferenceType";
const _bMAE = "baseModelArnEquals";
const _bOM = "byOutputModality";
const _bP = "byProvider";
const _cTA = "creationTimeAfter";
const _cTB = "creationTimeBefore";
const _fMAE = "foundationModelArnEquals";
const _gI = "guardrailIdentifier";
const _gV = "guardrailVersion";
const _iO = "isOwned";
const _mAE = "modelArnEquals";
const _mR = "maxResults";
const _nC = "nameContains";
const _nT = "nextToken";
const _oMNC = "outputModelNameContains";
const _sAE = "sourceAccountEquals";
const _sB = "sortBy";
const _sE = "statusEquals";
const _sMAE = "sourceModelArnEquals";
const _sO = "sortOrder";
const _sTA = "submitTimeAfter";
const _sTB = "submitTimeBefore";
const _tMNC = "targetModelNameContains";
